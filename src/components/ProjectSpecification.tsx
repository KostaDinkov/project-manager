import { useState } from 'react';
import { Project, Issue } from '../types';
import IssueList from './IssueList';
import IssueModal from './IssueModal';

interface ProjectSpecificationProps {
  project: Project;
  onProjectUpdate: (project: Project) => void;
}

export default function ProjectSpecification({ project, onProjectUpdate }: ProjectSpecificationProps) {
  const [selectedIssue, setSelectedIssue] = useState<Issue | null>(null);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [createIssueParent, setCreateIssueParent] = useState<Issue | null>(null);

  const handleIssueUpdate = (updatedIssue: Issue) => {
    const updateIssueInTree = (issues: Issue[]): Issue[] => {
      return issues.map(issue => {
        if (issue.id === updatedIssue.id) {
          return updatedIssue;
        }
        if (issue.subIssues.length > 0) {
          return {
            ...issue,
            subIssues: updateIssueInTree(issue.subIssues)
          };
        }
        return issue;
      });
    };

    const updatedProject = {
      ...project,
      issues: updateIssueInTree(project.issues)
    };

    onProjectUpdate(updatedProject);
    setSelectedIssue(null);
  };

  const handleIssueCreate = (newIssue: Omit<Issue, 'id' | 'subIssues'>) => {
    const issue: Issue = {
      ...newIssue,
      id: Date.now().toString(), // In a real app, this would be generated by the API
      subIssues: []
    };

    if (createIssueParent) {
      // Add as sub-issue
      const updateIssueInTree = (issues: Issue[]): Issue[] => {
        return issues.map(parentIssue => {
          if (parentIssue.id === createIssueParent.id) {
            return {
              ...parentIssue,
              subIssues: [...parentIssue.subIssues, issue]
            };
          }
          if (parentIssue.subIssues.length > 0) {
            return {
              ...parentIssue,
              subIssues: updateIssueInTree(parentIssue.subIssues)
            };
          }
          return parentIssue;
        });
      };

      const updatedProject = {
        ...project,
        issues: updateIssueInTree(project.issues)
      };

      onProjectUpdate(updatedProject);
    } else {
      // Add as top-level issue
      const updatedProject = {
        ...project,
        issues: [...project.issues, issue]
      };
      onProjectUpdate(updatedProject);
    }

    setIsCreateModalOpen(false);
    setCreateIssueParent(null);
  };

  const handleCreateIssue = (parent?: Issue) => {
    setCreateIssueParent(parent || null);
    setIsCreateModalOpen(true);
  };

  return (
    <div className="space-y-6">
      <div className="bg-white shadow rounded-lg p-6">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">{project.name}</h2>
            <p className="text-gray-600 mt-1">{project.description}</p>
            <p className="text-sm text-gray-500 mt-1">Repository: {project.repository}</p>
          </div>
          <button
            onClick={() => handleCreateIssue()}
            className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            Add Issue
          </button>
        </div>

        <div className="border-t border-gray-200 pt-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Project Specification</h3>
          <IssueList
            issues={project.issues}
            level={0}
            onIssueClick={setSelectedIssue}
            onCreateIssue={handleCreateIssue}
          />
        </div>
      </div>

      {selectedIssue && (
        <IssueModal
          issue={selectedIssue}
          onClose={() => setSelectedIssue(null)}
          onUpdate={handleIssueUpdate}
        />
      )}

      {isCreateModalOpen && (
        <IssueModal
          issue={null}
          parentIssue={createIssueParent}
          onClose={() => {
            setIsCreateModalOpen(false);
            setCreateIssueParent(null);
          }}
          onCreate={handleIssueCreate}
        />
      )}
    </div>
  );
}
